

   1. About

    VSBHDA is a fork of SBEMU - it's compatible with the standard HDPMI32i
   included in the HX runtime package. 


   2. Requirements

    Besides VSBHDA the following binaries are needed:

   - HDPMI32i : included in the HX DOS extender runtime package HXRT.
                Download from https://github.com/Baron-von-Riedesel/HX.
                Version of HDPMI32i must be v3.21 or better.

   - Jemm     : To be found at https://github.com/Baron-von-Riedesel/Jemm.
                This package will also contain JLOAD.EXE and QPIEMU.DLL.
                Version must be at least v5.84. Jemm - or rather QPIEMU.DLL
                - is necessary for VSBHDA's support for "real-mode" games.
                Alternately, Qemm may be used.


   3. Usage

   The steps to load VSBHDA are
   
   - load JemmEx/Jemm386 in CONFIG.SYS
   - set environment variable BLASTER
   - run "JLoad QPIEMU.DLL"
   - run "HDPMI32i -x"
   - run "VSBHDA"

    As already mentioned, QPIEMU.DLL is needed for real-mode port trapping;
   also, if it's not installed, UNINST.COM, a program to unload VSBHDA, won't
   work.

    With the BLASTER variable one can select what card VSBHDA is to emulate:
   SB, SB Pro or SB 16; for example: "SET BLASTER=A220 I7 D1 H5 T6" will select
   a SB16.

    VSBHDA will understand a few commandline options. Some, like /A, /I, /D, /H
   or /T, are similar to the settings of the BLASTER environment variable ( this
   variable is NOT altered by VSBHDA ). The others are:

     /OPL    : Set OPL3 emulation
     /PM     : Set protected-mode support
     /RM     : Set real-mode support
     /F      : Set frequency
     /VOL    : Set master volume
     /O      : Set output (HDA only)
     /DEV    : Set start index for device scan (HDA only)

    Note that if the frequency set by /F isn't supported by the codec, it can't
   be used - that's also true for the default value ( 22050 Hz ). In such cases
   VSBHDA will use a frequency that is supported AND is at least the value set
   by /F ( or the default ).


   4. Hints


   4.1 SETPVI/RESPVI

    A few protected-mode games may "freeze" with the default settings of VSBHDA.
   Then there's a chance that running SETPVI may fix that. Note that SETPVI
   won't work with Qemm.

    SETPVI will set the PVI flag in cpu register CR4, RESPVI will reset it. When
   this bit is set, VSBHDA is unable to change the interrupt flag (IF), since
   CLI/STI will modify the virtual interrupt flag (VIF) only.


   4.2 Extended Memory

    Some DOS games refuse to run if too much extended memory is available. There
   are some simple software workarounds for such issues:

   - HDPMI32i's -x cmdline option: this restricts the free DPMI memory to 256MB.
     Optionally, this can be further reduced by appending a digit to -x: -x2
     reduces free memory to 64MB, -x4 to 16MB. However, this is a soft limit,
     since it's just the amount of memory that's reported as free - the program 
     may still allocate more than that, if available.

   - XMSRes: tool to reduce free XMS memory. This TSR can be uninstalled, so
     the reduction may be reverted without reboot.

   - JemmEx's MAXEXT option: tells JemmEx's XMS host to supply a max. amount of
     extended memory.


   4.3 Jemm's NOVCPI Option
   
    If VSBHDA is to work for DOS protected-mode games, those games must use the
   HDPMI32i DPMI host. This is usually no problem, because there's an API to
   detect the presence of such a host. However, games may ignore an installed
   DPMI host and use the so-called VCPI API instead to run their very own low-
   level code. This will actually deactivate HDPMI32i ( and VSBHDA ) for the
   game. For such cases, Jemm386/JemmEx offers the NOVCPI option. This option
   must be set *after* VSBHDA has been loaded and *before* the game is launched.

